{"ast":null,"code":"// Utility functions for URL generation and parsing\n\n/**\n * Generates a SEO-friendly recipe slug\n * @param {string} title - Recipe title\n * @param {string} id - Recipe ID (UUID) or timestamp\n * @returns {string} - URL-friendly slug like \"delicious-pasta-recipe-uuid\" or \"delicious-pasta-recipe-1696687200000\"\n */\nexport const generateRecipeSlug = (title, id) => {\n  if (!title || !id) return '';\n\n  // Convert title to URL-friendly format\n  const titleSlug = title.toLowerCase().replace(/[^a-z0-9\\s-]/g, '') // Remove special characters\n  .replace(/\\s+/g, '-') // Replace spaces with hyphens\n  .replace(/-+/g, '-') // Replace multiple hyphens with single\n  .trim('-'); // Remove leading/trailing hyphens\n\n  // Handle different ID formats\n  let idValue;\n  if (typeof id === 'string' && id.includes('-') && id.length === 36) {\n    // UUID format - use as is\n    idValue = id;\n  } else if (id instanceof Date) {\n    // Date object - convert to timestamp\n    idValue = id.getTime().toString();\n  } else if (typeof id === 'string' && !isNaN(Date.parse(id))) {\n    // Date string - convert to timestamp\n    idValue = new Date(id).getTime().toString();\n  } else {\n    // Use as is (could be timestamp or other ID)\n    idValue = id.toString();\n  }\n  return `${titleSlug}-${idValue}`;\n};\n\n/**\n * Parses a recipe slug to extract ID (UUID or timestamp)\n * @param {string} slug - Recipe slug like \"delicious-pasta-recipe-uuid\" or \"delicious-pasta-recipe-1696687200000\"\n * @returns {string} - Extracted ID (UUID or timestamp)\n */\nexport const parseRecipeSlug = slug => {\n  if (!slug) return '';\n\n  // Find the last occurrence of a dash and extract everything after it\n  const lastDashIndex = slug.lastIndexOf('-');\n  if (lastDashIndex === -1) return '';\n  const id = slug.substring(lastDashIndex + 1);\n\n  // Return the ID if it's either a UUID or timestamp\n  if (/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(id) || /^\\d+$/.test(id)) {\n    return id;\n  }\n  return '';\n};\n\n/**\n * Generates user profile URL\n * @param {string} username - User's username\n * @returns {string} - Profile URL like \"/johndoe\"\n */\nexport const generateProfileUrl = username => {\n  if (!username) return '/profile';\n  return `/${username}`;\n};\n\n/**\n * Generates user's recipes page URL\n * @param {string} username - User's username\n * @returns {string} - My recipes URL like \"/johndoe/my-recipes\"\n */\nexport const generateMyRecipesUrl = username => {\n  if (!username) return '/my-recipes';\n  return `/${username}/my-recipes`;\n};\n\n/**\n * Generates create recipe page URL\n * @param {string} username - User's username\n * @returns {string} - Create recipe URL like \"/johndoe/create-recipe\"\n */\nexport const generateCreateRecipeUrl = username => {\n  if (!username) return '/create-recipe';\n  return `/${username}/create-recipe`;\n};\n\n/**\n * Generates recipe detail URL\n * @param {string} username - Recipe owner's username\n * @param {Object|string} recipeOrTitle - Recipe object or title string\n * @param {string} timestamp - Creation timestamp or ID (optional if recipe object)\n * @returns {string} - Recipe URL like \"/johndoe/my-recipes/delicious-pasta-recipe-1696687200000\"\n */\nexport const generateRecipeUrl = (username, recipeOrTitle, timestamp) => {\n  if (!username) return '#';\n  let title, id;\n\n  // Handle recipe object parameter\n  if (typeof recipeOrTitle === 'object' && recipeOrTitle !== null) {\n    title = recipeOrTitle.title;\n    id = recipeOrTitle.id || recipeOrTitle.created_at;\n  } else {\n    title = recipeOrTitle;\n    id = timestamp;\n  }\n  if (!title || !id) return '#';\n  const slug = generateRecipeSlug(title, id);\n  return `/${username}/my-recipes/${slug}`;\n};\n\n/**\n * Validates if a string is a valid username format\n * @param {string} username - Username to validate\n * @returns {boolean} - True if valid username format\n */\nexport const isValidUsername = username => {\n  if (!username) return false;\n  // Username should be 3-30 characters, alphanumeric with underscores/hyphens\n  return /^[a-zA-Z0-9_-]{3,30}$/.test(username);\n};\n\n/**\n * Gets the current user's username from profile or generates fallback\n * @param {Object} user - User object from Supabase\n * @param {Object} profile - User profile object\n * @returns {string} - Username or fallback\n */\nexport const getUsernameForUrl = (user, profile) => {\n  var _user$user_metadata;\n  if (profile !== null && profile !== void 0 && profile.username) return profile.username;\n  if (user !== null && user !== void 0 && (_user$user_metadata = user.user_metadata) !== null && _user$user_metadata !== void 0 && _user$user_metadata.username) return user.user_metadata.username;\n  if (user !== null && user !== void 0 && user.email) return user.email.split('@')[0].replace(/[^a-zA-Z0-9]/g, '');\n  return 'user';\n};","map":{"version":3,"names":["generateRecipeSlug","title","id","titleSlug","toLowerCase","replace","trim","idValue","includes","length","Date","getTime","toString","isNaN","parse","parseRecipeSlug","slug","lastDashIndex","lastIndexOf","substring","test","generateProfileUrl","username","generateMyRecipesUrl","generateCreateRecipeUrl","generateRecipeUrl","recipeOrTitle","timestamp","created_at","isValidUsername","getUsernameForUrl","user","profile","_user$user_metadata","user_metadata","email","split"],"sources":["/Users/habeebsait/Apps/food_app/recipe-app-web/src/utils/urlUtils.js"],"sourcesContent":["// Utility functions for URL generation and parsing\n\n/**\n * Generates a SEO-friendly recipe slug\n * @param {string} title - Recipe title\n * @param {string} id - Recipe ID (UUID) or timestamp\n * @returns {string} - URL-friendly slug like \"delicious-pasta-recipe-uuid\" or \"delicious-pasta-recipe-1696687200000\"\n */\nexport const generateRecipeSlug = (title, id) => {\n  if (!title || !id) return '';\n  \n  // Convert title to URL-friendly format\n  const titleSlug = title\n    .toLowerCase()\n    .replace(/[^a-z0-9\\s-]/g, '') // Remove special characters\n    .replace(/\\s+/g, '-') // Replace spaces with hyphens\n    .replace(/-+/g, '-') // Replace multiple hyphens with single\n    .trim('-'); // Remove leading/trailing hyphens\n  \n  // Handle different ID formats\n  let idValue;\n  if (typeof id === 'string' && id.includes('-') && id.length === 36) {\n    // UUID format - use as is\n    idValue = id;\n  } else if (id instanceof Date) {\n    // Date object - convert to timestamp\n    idValue = id.getTime().toString();\n  } else if (typeof id === 'string' && !isNaN(Date.parse(id))) {\n    // Date string - convert to timestamp\n    idValue = new Date(id).getTime().toString();\n  } else {\n    // Use as is (could be timestamp or other ID)\n    idValue = id.toString();\n  }\n  \n  return `${titleSlug}-${idValue}`;\n};\n\n/**\n * Parses a recipe slug to extract ID (UUID or timestamp)\n * @param {string} slug - Recipe slug like \"delicious-pasta-recipe-uuid\" or \"delicious-pasta-recipe-1696687200000\"\n * @returns {string} - Extracted ID (UUID or timestamp)\n */\nexport const parseRecipeSlug = (slug) => {\n  if (!slug) return '';\n  \n  // Find the last occurrence of a dash and extract everything after it\n  const lastDashIndex = slug.lastIndexOf('-');\n  if (lastDashIndex === -1) return '';\n  \n  const id = slug.substring(lastDashIndex + 1);\n  \n  // Return the ID if it's either a UUID or timestamp\n  if (/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(id) || /^\\d+$/.test(id)) {\n    return id;\n  }\n  \n  return '';\n};\n\n/**\n * Generates user profile URL\n * @param {string} username - User's username\n * @returns {string} - Profile URL like \"/johndoe\"\n */\nexport const generateProfileUrl = (username) => {\n  if (!username) return '/profile';\n  return `/${username}`;\n};\n\n/**\n * Generates user's recipes page URL\n * @param {string} username - User's username\n * @returns {string} - My recipes URL like \"/johndoe/my-recipes\"\n */\nexport const generateMyRecipesUrl = (username) => {\n  if (!username) return '/my-recipes';\n  return `/${username}/my-recipes`;\n};\n\n/**\n * Generates create recipe page URL\n * @param {string} username - User's username\n * @returns {string} - Create recipe URL like \"/johndoe/create-recipe\"\n */\nexport const generateCreateRecipeUrl = (username) => {\n  if (!username) return '/create-recipe';\n  return `/${username}/create-recipe`;\n};\n\n/**\n * Generates recipe detail URL\n * @param {string} username - Recipe owner's username\n * @param {Object|string} recipeOrTitle - Recipe object or title string\n * @param {string} timestamp - Creation timestamp or ID (optional if recipe object)\n * @returns {string} - Recipe URL like \"/johndoe/my-recipes/delicious-pasta-recipe-1696687200000\"\n */\nexport const generateRecipeUrl = (username, recipeOrTitle, timestamp) => {\n  if (!username) return '#';\n  \n  let title, id;\n  \n  // Handle recipe object parameter\n  if (typeof recipeOrTitle === 'object' && recipeOrTitle !== null) {\n    title = recipeOrTitle.title;\n    id = recipeOrTitle.id || recipeOrTitle.created_at;\n  } else {\n    title = recipeOrTitle;\n    id = timestamp;\n  }\n  \n  if (!title || !id) return '#';\n  \n  const slug = generateRecipeSlug(title, id);\n  return `/${username}/my-recipes/${slug}`;\n};\n\n/**\n * Validates if a string is a valid username format\n * @param {string} username - Username to validate\n * @returns {boolean} - True if valid username format\n */\nexport const isValidUsername = (username) => {\n  if (!username) return false;\n  // Username should be 3-30 characters, alphanumeric with underscores/hyphens\n  return /^[a-zA-Z0-9_-]{3,30}$/.test(username);\n};\n\n/**\n * Gets the current user's username from profile or generates fallback\n * @param {Object} user - User object from Supabase\n * @param {Object} profile - User profile object\n * @returns {string} - Username or fallback\n */\nexport const getUsernameForUrl = (user, profile) => {\n  if (profile?.username) return profile.username;\n  if (user?.user_metadata?.username) return user.user_metadata.username;\n  if (user?.email) return user.email.split('@')[0].replace(/[^a-zA-Z0-9]/g, '');\n  return 'user';\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}